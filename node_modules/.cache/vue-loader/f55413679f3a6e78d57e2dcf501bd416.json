{"remainingRequest":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/compie/WebstormProjects/secondP_axios/axios-project/src/components/auth/signup.vue?vue&type=template&id=4179f402&scoped=true&","dependencies":[{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/src/components/auth/signup.vue","mtime":1533805419759},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/cache-loader/dist/cjs.js","mtime":1533632816525},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/cache-loader/dist/cjs.js","mtime":1533632816525},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"signup\" } }, [\n    _c(\"div\", { staticClass: \"signup-form\" }, [\n      _c(\n        \"form\",\n        {\n          on: {\n            submit: function($event) {\n              $event.preventDefault()\n              return _vm.onSubmit($event)\n            }\n          }\n        },\n        [\n          _c(\n            \"div\",\n            { staticClass: \"input\", class: { invalid: _vm.$v.email.$error } },\n            [\n              _c(\"label\", { attrs: { for: \"email\" } }, [_vm._v(\"Mail\")]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.email,\n                    expression: \"email\"\n                  }\n                ],\n                attrs: { type: \"email\", id: \"email\" },\n                domProps: { value: _vm.email },\n                on: {\n                  blur: function($event) {\n                    _vm.$v.email.$touch()\n                  },\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.email = $event.target.value\n                  }\n                }\n              }),\n              !_vm.$v.email.email\n                ? _c(\"p\", [_vm._v(\"Please provide a valid email address.\")])\n                : _vm._e(),\n              !_vm.$v.email.required\n                ? _c(\"p\", [_vm._v(\"This field must not be empty.\")])\n                : _vm._e()\n            ]\n          ),\n          _c(\n            \"div\",\n            { staticClass: \"input\", class: { invalid: _vm.$v.age.$error } },\n            [\n              _c(\"label\", { attrs: { for: \"age\" } }, [_vm._v(\"Your Age\")]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model.number\",\n                    value: _vm.age,\n                    expression: \"age\",\n                    modifiers: { number: true }\n                  }\n                ],\n                attrs: { type: \"number\", id: \"age\" },\n                domProps: { value: _vm.age },\n                on: {\n                  blur: [\n                    function($event) {\n                      _vm.$v.age.$touch()\n                    },\n                    function($event) {\n                      _vm.$forceUpdate()\n                    }\n                  ],\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.age = _vm._n($event.target.value)\n                  }\n                }\n              }),\n              !_vm.$v.age.minVal\n                ? _c(\"p\", [\n                    _vm._v(\n                      \"you have to be at least \" +\n                        _vm._s(_vm.$v.age.$params.minVal.min) +\n                        \" years old\"\n                    )\n                  ])\n                : _vm._e(),\n              !_vm.$v.age.maxVal\n                ? _c(\"p\", [\n                    _vm._v(\n                      \"you have to be at most \" +\n                        _vm._s(_vm.$v.age.$params.maxVal.max) +\n                        \" years old\"\n                    )\n                  ])\n                : _vm._e()\n            ]\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"input\",\n              class: { invalid: _vm.$v.password.$error }\n            },\n            [\n              _c(\"label\", { attrs: { for: \"password\" } }, [_vm._v(\"Password\")]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.password,\n                    expression: \"password\"\n                  }\n                ],\n                attrs: { type: \"password\", id: \"password\" },\n                domProps: { value: _vm.password },\n                on: {\n                  blur: function($event) {\n                    _vm.$v.password.$touch()\n                  },\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.password = $event.target.value\n                  }\n                }\n              }),\n              !_vm.$v.password.minLen\n                ? _c(\"p\", [\n                    _vm._v(\n                      \"you have to pass at least \" +\n                        _vm._s(_vm.$v.password.$params.minLen.min) +\n                        \" characters\"\n                    )\n                  ])\n                : _vm._e()\n            ]\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"input\",\n              class: { invalid: _vm.$v.confirmPassword.$error }\n            },\n            [\n              _c(\"label\", { attrs: { for: \"confirm-password\" } }, [\n                _vm._v(\"Confirm Password\")\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.confirmPassword,\n                    expression: \"confirmPassword\"\n                  }\n                ],\n                attrs: { type: \"password\", id: \"confirm-password\" },\n                domProps: { value: _vm.confirmPassword },\n                on: {\n                  blur: function($event) {\n                    _vm.$v.confirmPassword.$touch()\n                  },\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.confirmPassword = $event.target.value\n                  }\n                }\n              })\n            ]\n          ),\n          _c(\"div\", { staticClass: \"input\" }, [\n            _c(\"label\", { attrs: { for: \"country\" } }, [_vm._v(\"Country\")]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.country,\n                    expression: \"country\"\n                  }\n                ],\n                attrs: { id: \"country\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.country = $event.target.multiple\n                      ? $$selectedVal\n                      : $$selectedVal[0]\n                  }\n                }\n              },\n              [\n                _c(\"option\", { attrs: { value: \"usa\" } }, [_vm._v(\"USA\")]),\n                _c(\"option\", { attrs: { value: \"india\" } }, [_vm._v(\"India\")]),\n                _c(\"option\", { attrs: { value: \"uk\" } }, [_vm._v(\"UK\")]),\n                _c(\"option\", { attrs: { value: \"germany\" } }, [\n                  _vm._v(\"Germany\")\n                ])\n              ]\n            )\n          ]),\n          _c(\"div\", { staticClass: \"hobbies\" }, [\n            _c(\"h3\", [_vm._v(\"Add some Hobbies\")]),\n            _c(\n              \"button\",\n              { attrs: { type: \"button\" }, on: { click: _vm.onAddHobby } },\n              [_vm._v(\"Add Hobby\")]\n            ),\n            _c(\n              \"div\",\n              { staticClass: \"hobby-list\" },\n              [\n                _vm._l(_vm.hobbyInputs, function(hobbyInput, index) {\n                  return _c(\n                    \"div\",\n                    {\n                      key: hobbyInput.id,\n                      staticClass: \"input\",\n                      class: {\n                        invalid: _vm.$v.hobbyInputs.$each[index].value.$error\n                      }\n                    },\n                    [\n                      _c(\"label\", { attrs: { for: hobbyInput.id } }, [\n                        _vm._v(\"Hobby #\" + _vm._s(index))\n                      ]),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: hobbyInput.value,\n                            expression: \"hobbyInput.value\"\n                          }\n                        ],\n                        attrs: { type: \"text\", id: hobbyInput.id },\n                        domProps: { value: hobbyInput.value },\n                        on: {\n                          blur: function($event) {\n                            _vm.$v.hobbyInputs.$each[index].value.$touch()\n                          },\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(hobbyInput, \"value\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _c(\n                        \"button\",\n                        {\n                          attrs: { type: \"button\" },\n                          on: {\n                            click: function($event) {\n                              _vm.onDeleteHobby(hobbyInput.id)\n                            }\n                          }\n                        },\n                        [_vm._v(\"X\")]\n                      )\n                    ]\n                  )\n                }),\n                !_vm.$v.hobbyInputs.minLen\n                  ? _c(\"p\", [\n                      _vm._v(\n                        \"\\n                        You have to specify at least \" +\n                          _vm._s(_vm.$v.hobbyInputs.$params.minLen.min) +\n                          \" hobbies.\"\n                      )\n                    ])\n                  : _vm._e(),\n                !_vm.$v.hobbyInputs.required\n                  ? _c(\"p\", [_vm._v(\"Please add hobbies.\")])\n                  : _vm._e()\n              ],\n              2\n            )\n          ]),\n          _c(\n            \"div\",\n            {\n              staticClass: \"input inline\",\n              class: { invalid: _vm.$v.terms.$invalid }\n            },\n            [\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.terms,\n                    expression: \"terms\"\n                  }\n                ],\n                attrs: { type: \"checkbox\", id: \"terms\" },\n                domProps: {\n                  checked: Array.isArray(_vm.terms)\n                    ? _vm._i(_vm.terms, null) > -1\n                    : _vm.terms\n                },\n                on: {\n                  change: [\n                    function($event) {\n                      var $$a = _vm.terms,\n                        $$el = $event.target,\n                        $$c = $$el.checked ? true : false\n                      if (Array.isArray($$a)) {\n                        var $$v = null,\n                          $$i = _vm._i($$a, $$v)\n                        if ($$el.checked) {\n                          $$i < 0 && (_vm.terms = $$a.concat([$$v]))\n                        } else {\n                          $$i > -1 &&\n                            (_vm.terms = $$a\n                              .slice(0, $$i)\n                              .concat($$a.slice($$i + 1)))\n                        }\n                      } else {\n                        _vm.terms = $$c\n                      }\n                    },\n                    function($event) {\n                      _vm.$v.terms.$touch()\n                    }\n                  ]\n                }\n              }),\n              _c(\"label\", { attrs: { for: \"terms\" } }, [\n                _vm._v(\"Accept Terms of Use\")\n              ])\n            ]\n          ),\n          _c(\"div\", { staticClass: \"submit\" }, [\n            _c(\n              \"button\",\n              { attrs: { type: \"submit\", disabled: _vm.$v.$error } },\n              [_vm._v(\"Submit\")]\n            ),\n            _c(\"p\", [_vm._v(_vm._s(_vm.$v.$error))]),\n            _c(\"p\", [_vm._v(_vm._s(_vm.$v.$invalid))])\n          ])\n        ]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}