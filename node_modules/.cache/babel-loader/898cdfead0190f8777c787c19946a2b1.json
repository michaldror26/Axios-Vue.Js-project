{"remainingRequest":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/babel-loader/lib/index.js!/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/compie/WebstormProjects/secondP_axios/axios-project/src/components/auth/signup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/src/components/auth/signup.vue","mtime":1533805419759},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/cache-loader/dist/cjs.js","mtime":1533632816525},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/home/compie/WebstormProjects/secondP_axios/axios-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, email, numeric, minValue, maxValue, minLength, sameAs } from 'vuelidate/lib/validators';\nexport default {\n  data: function data() {\n    return {\n      email: '',\n      age: null,\n      password: '',\n      confirmPassword: '',\n      country: 'usa',\n      hobbyInputs: [],\n      terms: false\n    };\n  },\n  methods: {\n    onAddHobby: function onAddHobby() {\n      var newHobby = {\n        id: Math.random() * Math.random() * 1000,\n        value: ''\n      };\n      this.hobbyInputs.push(newHobby);\n    },\n    onDeleteHobby: function onDeleteHobby(id) {\n      this.hobbyInputs = this.hobbyInputs.filter(function (hobby) {\n        return hobby.id !== id;\n      });\n    },\n    onSubmit: function onSubmit() {\n      var formData = {\n        email: this.email,\n        age: this.age,\n        password: this.password,\n        confirmPassword: this.confirmPassword,\n        country: this.country,\n        hobbies: this.hobbyInputs.map(function (hobby) {\n          return hobby.value;\n        }),\n        terms: this.terms\n      };\n      console.log(formData);\n      this.$store.dispatch('signup', formData);\n    }\n  },\n  validations: {\n    email: {\n      required: required,\n      email: email\n    },\n    age: {\n      required: required,\n      numeric: numeric,\n      minVal: minValue(18),\n      maxVal: maxValue(120)\n    },\n    password: {\n      required: required,\n      minLen: minLength(6)\n    },\n    confirmPassword: {\n      sameAs: sameAs(function (vm) {\n        return vm.password;\n      })\n    },\n    terms: {\n      checked: function checked(val) {\n        return this.country === 'germany' || val;\n      }\n    },\n    hobbyInputs: {\n      required: required,\n      minLen: minLength(2),\n      $each: {\n        value: {\n          required: required,\n          minLen: minLength(5)\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["signup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA,SACA,QADA,EAEA,KAFA,EAGA,OAHA,EAIA,QAJA,EAKA,QALA,EAMA,SANA,EAOA,MAPA,QASA,0BATA;AAWA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,aAAA,EADA;AAEA,WAAA,IAFA;AAGA,gBAAA,EAHA;AAIA,uBAAA,EAJA;AAKA,eAAA,KALA;AAMA,mBAAA,EANA;AAOA,aAAA;AAPA,KAAA;AASA,GAXA;AAYA,WAAA;AACA,cADA,wBACA;AACA,UAAA,WAAA;AACA,YAAA,KAAA,MAAA,KAAA,KAAA,MAAA,EAAA,GAAA,IADA;AAEA,eAAA;AAFA,OAAA;AAIA,WAAA,WAAA,CAAA,IAAA,CAAA,QAAA;AACA,KAPA;AAQA,iBARA,yBAQA,EARA,EAQA;AACA,WAAA,WAAA,GAAA,KAAA,WAAA,CAAA,MAAA,CAAA;AAAA,eAAA,MAAA,EAAA,KAAA,EAAA;AAAA,OAAA,CAAA;AACA,KAVA;AAWA,YAXA,sBAWA;AACA,UAAA,WAAA;AACA,eAAA,KAAA,KADA;AAEA,aAAA,KAAA,GAFA;AAGA,kBAAA,KAAA,QAHA;AAIA,yBAAA,KAAA,eAJA;AAKA,iBAAA,KAAA,OALA;AAMA,iBAAA,KAAA,WAAA,CAAA,GAAA,CAAA;AAAA,iBAAA,MAAA,KAAA;AAAA,SAAA,CANA;AAOA,eAAA,KAAA;AAPA,OAAA;AASA,cAAA,GAAA,CAAA,QAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,QAAA,EAAA,QAAA;AACA;AAvBA,GAZA;AAqCA,eAAA;AACA,WAAA;AACA,wBADA;AACA;AADA,KADA;AAIA,SAAA;AACA,wBADA;AAEA,sBAFA;AAGA,cAAA,SAAA,EAAA,CAHA;AAIA,cAAA,SAAA,GAAA;AAJA,KAJA;AAUA,cAAA;AACA,wBADA;AAEA,cAAA,UAAA,CAAA;AAFA,KAVA;AAcA,qBAAA;AACA,cAAA,OAAA,cAAA;AACA,eAAA,GAAA,QAAA;AACA,OAFA;AADA,KAdA;AAmBA,WAAA;AACA,aADA,mBACA,GADA,EACA;AACA,eAAA,KAAA,OAAA,KAAA,SAAA,IAAA,GAAA;AACA;AAHA,KAnBA;AAwBA,iBAAA;AACA,wBADA;AAEA,cAAA,UAAA,CAAA,CAFA;AAGA,aAAA;AACA,eAAA;AACA,4BADA;AAEA,kBAAA,UAAA,CAAA;AAFA;AADA;AAHA;AAxBA;AArCA,CAAA","sourcesContent":["<template>\n    <div id=\"signup\">\n        <div class=\"signup-form\">\n            <form @submit.prevent=\"onSubmit\">\n                <div class=\"input\" :class=\"{invalid:$v.email.$error}\">\n                    <label for=\"email\">Mail</label>\n                    <input\n                            type=\"email\"\n                            id=\"email\"\n                            @blur=\"$v.email.$touch()\"\n                            v-model=\"email\">\n                    <p v-if=\"!$v.email.email\">Please provide a valid email address.</p>\n                    <p v-if=\"!$v.email.required\">This field must not be empty.</p>\n                </div>\n                <div class=\"input\" :class=\"{invalid:$v.age.$error} \">\n                    <label for=\"age\">Your Age</label>\n                    <input\n                            type=\"number\"\n                            id=\"age\"\n                            @blur=\"$v.age.$touch()\"\n                            v-model.number=\"age\">\n                    <p v-if=\"!$v.age.minVal\">you have to be at least {{$v.age.$params.minVal.min }} years old</p>\n                    <p v-if=\"!$v.age.maxVal\">you have to be at most {{$v.age.$params.maxVal.max }} years old</p>\n                </div>\n                <div class=\"input\" :class=\"{invalid :$v.password.$error}\">\n                    <label for=\"password\">Password</label>\n                    <input\n                            type=\"password\"\n                            id=\"password\"\n                            @blur=\"$v.password.$touch()\"\n                            v-model=\"password\">\n                    <p v-if=\"!$v.password.minLen\">you have to pass at least {{$v.password.$params.minLen.min}} characters</p>\n                </div>\n                <div class=\"input\" :class=\"{invalid :$v.confirmPassword.$error}\">\n                    <label for=\"confirm-password\">Confirm Password</label>\n                    <input\n                            type=\"password\"\n                            id=\"confirm-password\"\n                            @blur=\"$v.confirmPassword.$touch()\"\n                            v-model=\"confirmPassword\">\n                </div>\n                <div class=\"input\">\n                    <label for=\"country\">Country</label>\n                    <select id=\"country\" v-model=\"country\">\n                        <option value=\"usa\">USA</option>\n                        <option value=\"india\">India</option>\n                        <option value=\"uk\">UK</option>\n                        <option value=\"germany\">Germany</option>\n                    </select>\n                </div>\n                <div class=\"hobbies\">\n                    <h3>Add some Hobbies</h3>\n                    <button @click=\"onAddHobby\" type=\"button\">Add Hobby</button>\n                    <div class=\"hobby-list\">\n                        <div\n                                class=\"input\"\n                                v-for=\"(hobbyInput, index) in hobbyInputs\"\n                                :key=\"hobbyInput.id\"\n                                :class=\"{invalid: $v.hobbyInputs.$each[index].value.$error}\">\n                            <label :for=\"hobbyInput.id\">Hobby #{{ index }}</label>\n                            <input\n                                    type=\"text\"\n                                    :id=\"hobbyInput.id\"\n                                    @blur=\"$v.hobbyInputs.$each[index].value.$touch()\"\n                                    v-model=\"hobbyInput.value\">\n                            <button @click=\"onDeleteHobby(hobbyInput.id)\" type=\"button\">X</button>\n                        </div>\n                        <p v-if=\"!$v.hobbyInputs.minLen\">\n                            You have to specify at least {{ $v.hobbyInputs.$params.minLen.min }} hobbies.</p>\n                        <p v-if=\"!$v.hobbyInputs.required\">Please add hobbies.</p>\n\n                    </div>\n                </div>\n                <div class=\"input inline\" :class=\"{invalid:$v.terms.$invalid}\">\n                    <input type=\"checkbox\" id=\"terms\" @change=\"$v.terms.$touch()\" v-model=\"terms\">\n                    <label for=\"terms\">Accept Terms of Use</label>\n                </div>\n                <div class=\"submit\">\n                    <button type=\"submit\" :disabled=\"$v.$error\"  >Submit</button>\n                    <p>{{$v.$error}}</p>\n                    <p>{{$v.$invalid}}</p>\n                </div>\n            </form>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {\n        required,\n        email,\n        numeric,\n        minValue,\n        maxValue,\n        minLength,\n        sameAs\n\n    } from 'vuelidate/lib/validators'\n\n    export default {\n        data() {\n            return {\n                email: '',\n                age: null,\n                password: '',\n                confirmPassword: '',\n                country: 'usa',\n                hobbyInputs: [],\n                terms: false\n            }\n        },\n        methods: {\n            onAddHobby() {\n                const newHobby = {\n                    id: Math.random() * Math.random() * 1000,\n                    value: ''\n                }\n                this.hobbyInputs.push(newHobby)\n            },\n            onDeleteHobby(id) {\n                this.hobbyInputs = this.hobbyInputs.filter(hobby => hobby.id !== id)\n            },\n            onSubmit() {\n                const formData = {\n                    email: this.email,\n                    age: this.age,\n                    password: this.password,\n                    confirmPassword: this.confirmPassword,\n                    country: this.country,\n                    hobbies: this.hobbyInputs.map(hobby => hobby.value),\n                    terms: this.terms\n                }\n                console.log(formData);\n                this.$store.dispatch('signup', formData);\n            }\n        },\n        validations: {\n            email: {\n                required, email\n            },\n            age: {\n                required,\n                numeric,\n                minVal: minValue(18),\n                maxVal: maxValue(120)\n            },\n            password: {\n                required,\n                minLen: minLength(6)\n            },\n            confirmPassword: {\n                sameAs: sameAs(vm => {\n                    return vm.password;\n                })\n            },\n            terms: {\n                checked(val) {\n                    return this.country === 'germany' || val;\n                }\n            },\n            hobbyInputs: {\n                required,\n                minLen: minLength(2),\n                $each: {\n                    value: {\n                        required,\n                        minLen: minLength(5)\n                    }\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .signup-form {\n        width: 400px;\n        margin: 30px auto;\n        border: 1px solid #eee;\n        padding: 20px;\n        box-shadow: 0 2px 3px #ccc;\n    }\n\n    .input {\n        margin: 10px auto;\n    }\n\n    .input label {\n        display: block;\n        color: #4e4e4e;\n        margin-bottom: 6px;\n    }\n\n    .input.inline label {\n        display: inline;\n    }\n\n    .input input {\n        font: inherit;\n        width: 100%;\n        padding: 6px 12px;\n        box-sizing: border-box;\n        border: 1px solid #ccc;\n    }\n\n    .input.inline input {\n        width: auto;\n    }\n\n    .input input:focus {\n        outline: none;\n        border: 1px solid #521751;\n        background-color: #eee;\n    }\n\n    .input select {\n        border: 1px solid #ccc;\n        font: inherit;\n    }\n\n    .hobbies button {\n        border: 1px solid #521751;\n        background: #521751;\n        color: white;\n        padding: 6px;\n        font: inherit;\n        cursor: pointer;\n    }\n\n    .hobbies button:hover,\n    .hobbies button:active {\n        background-color: #8d4288;\n    }\n\n    .hobbies input {\n        width: 90%;\n    }\n\n    .submit button {\n        border: 1px solid #521751;\n        color: #521751;\n        padding: 10px 20px;\n        font: inherit;\n        cursor: pointer;\n    }\n\n    .submit button:hover,\n    .submit button:active {\n        background-color: #521751;\n        color: white;\n    }\n\n    .submit button[disabled],\n    .submit button[disabled]:hover,\n    .submit button[disabled]:active {\n        border: 1px solid #ccc;\n        background-color: transparent;\n        color: #ccc;\n        cursor: not-allowed;\n    }\n\n    .input.invalid label {\n        color: red;\n    }\n\n    .input.invalid input {\n        border: 1px solid red;\n        background-color: #ffc9aa;\n    }\n</style>"],"sourceRoot":"src/components/auth"}]}